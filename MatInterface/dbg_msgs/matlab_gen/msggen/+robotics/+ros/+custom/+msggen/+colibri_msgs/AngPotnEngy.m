classdef AngPotnEngy < robotics.ros.Message
    %AngPotnEngy MATLAB implementation of colibri_msgs/AngPotnEngy
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'colibri_msgs/AngPotnEngy' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'a9cfc998ba353c15490009bc90070ae1' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        AngleMin
        AngleMax
        AngleIncrement
        MaxPotnEngy
        MaxIndex
        PosOrderMax
        PosOrderIndex
        NegOrderMax
        NegOrderIndex
        PotentialValue
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AngleIncrement', 'AngleMax', 'AngleMin', 'Header', 'MaxIndex', 'MaxPotnEngy', 'NegOrderIndex', 'NegOrderMax', 'PosOrderIndex', 'PosOrderMax', 'PotentialValue'} % List of non-constant message properties
        ROSPropertyList = {'angle_increment', 'angle_max', 'angle_min', 'header', 'max_index', 'max_potn_engy', 'neg_order_index', 'neg_order_max', 'pos_order_index', 'pos_order_max', 'potential_value'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = AngPotnEngy(msg)
            %AngPotnEngy Construct the message object AngPotnEngy
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                obj.initializeFixedArrays;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                obj.initializeFixedArrays;
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
                obj(i,1).initializeFixedArrays;
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'AngPotnEngy', 'header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function anglemin = get.AngleMin(obj)
            %get.AngleMin Get the value for property AngleMin
            anglemin = single(obj.JavaMessage.getAngleMin);
        end
        
        function set.AngleMin(obj, anglemin)
            %set.AngleMin Set the value for property AngleMin
            validateattributes(anglemin, {'numeric'}, {'nonempty', 'scalar'}, 'AngPotnEngy', 'anglemin');
            
            obj.JavaMessage.setAngleMin(anglemin);
        end
        
        function anglemax = get.AngleMax(obj)
            %get.AngleMax Get the value for property AngleMax
            anglemax = single(obj.JavaMessage.getAngleMax);
        end
        
        function set.AngleMax(obj, anglemax)
            %set.AngleMax Set the value for property AngleMax
            validateattributes(anglemax, {'numeric'}, {'nonempty', 'scalar'}, 'AngPotnEngy', 'anglemax');
            
            obj.JavaMessage.setAngleMax(anglemax);
        end
        
        function angleincrement = get.AngleIncrement(obj)
            %get.AngleIncrement Get the value for property AngleIncrement
            angleincrement = single(obj.JavaMessage.getAngleIncrement);
        end
        
        function set.AngleIncrement(obj, angleincrement)
            %set.AngleIncrement Set the value for property AngleIncrement
            validateattributes(angleincrement, {'numeric'}, {'nonempty', 'scalar'}, 'AngPotnEngy', 'angleincrement');
            
            obj.JavaMessage.setAngleIncrement(angleincrement);
        end
        
        function maxpotnengy = get.MaxPotnEngy(obj)
            %get.MaxPotnEngy Get the value for property MaxPotnEngy
            maxpotnengy = single(obj.JavaMessage.getMaxPotnEngy);
        end
        
        function set.MaxPotnEngy(obj, maxpotnengy)
            %set.MaxPotnEngy Set the value for property MaxPotnEngy
            validateattributes(maxpotnengy, {'numeric'}, {'nonempty', 'scalar'}, 'AngPotnEngy', 'maxpotnengy');
            
            obj.JavaMessage.setMaxPotnEngy(maxpotnengy);
        end
        
        function maxindex = get.MaxIndex(obj)
            %get.MaxIndex Get the value for property MaxIndex
            maxindex = typecast(int16(obj.JavaMessage.getMaxIndex), 'uint16');
        end
        
        function set.MaxIndex(obj, maxindex)
            %set.MaxIndex Set the value for property MaxIndex
            validateattributes(maxindex, {'numeric'}, {'nonempty', 'scalar'}, 'AngPotnEngy', 'maxindex');
            
            obj.JavaMessage.setMaxIndex(maxindex);
        end
        
        function posordermax = get.PosOrderMax(obj)
            %get.PosOrderMax Get the value for property PosOrderMax
            posordermax = single(obj.JavaMessage.getPosOrderMax);
        end
        
        function set.PosOrderMax(obj, posordermax)
            %set.PosOrderMax Set the value for property PosOrderMax
            validateattributes(posordermax, {'numeric'}, {'nonempty', 'scalar'}, 'AngPotnEngy', 'posordermax');
            
            obj.JavaMessage.setPosOrderMax(posordermax);
        end
        
        function posorderindex = get.PosOrderIndex(obj)
            %get.PosOrderIndex Get the value for property PosOrderIndex
            posorderindex = typecast(int16(obj.JavaMessage.getPosOrderIndex), 'uint16');
        end
        
        function set.PosOrderIndex(obj, posorderindex)
            %set.PosOrderIndex Set the value for property PosOrderIndex
            validateattributes(posorderindex, {'numeric'}, {'nonempty', 'scalar'}, 'AngPotnEngy', 'posorderindex');
            
            obj.JavaMessage.setPosOrderIndex(posorderindex);
        end
        
        function negordermax = get.NegOrderMax(obj)
            %get.NegOrderMax Get the value for property NegOrderMax
            negordermax = single(obj.JavaMessage.getNegOrderMax);
        end
        
        function set.NegOrderMax(obj, negordermax)
            %set.NegOrderMax Set the value for property NegOrderMax
            validateattributes(negordermax, {'numeric'}, {'nonempty', 'scalar'}, 'AngPotnEngy', 'negordermax');
            
            obj.JavaMessage.setNegOrderMax(negordermax);
        end
        
        function negorderindex = get.NegOrderIndex(obj)
            %get.NegOrderIndex Get the value for property NegOrderIndex
            negorderindex = typecast(int16(obj.JavaMessage.getNegOrderIndex), 'uint16');
        end
        
        function set.NegOrderIndex(obj, negorderindex)
            %set.NegOrderIndex Set the value for property NegOrderIndex
            validateattributes(negorderindex, {'numeric'}, {'nonempty', 'scalar'}, 'AngPotnEngy', 'negorderindex');
            
            obj.JavaMessage.setNegOrderIndex(negorderindex);
        end
        
        function potentialvalue = get.PotentialValue(obj)
            %get.PotentialValue Get the value for property PotentialValue
            javaArray = obj.JavaMessage.getPotentialValue;
            array = obj.readJavaArray(javaArray, 'single');
            potentialvalue = single(array);
        end
        
        function set.PotentialValue(obj, potentialvalue)
            %set.PotentialValue Set the value for property PotentialValue
            validateattributes(potentialvalue, {'numeric'}, {'vector', 'numel', 181}, 'AngPotnEngy', 'potentialvalue');
            
            javaArray = obj.JavaMessage.getPotentialValue;
            array = obj.writeJavaArray(potentialvalue, javaArray, 'single');
            obj.JavaMessage.setPotentialValue(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function initializeFixedArrays(obj)
            %initializeFixedArrays Correctly initialize fixed-size arrays
            
            obj.PotentialValue = robotics.ros.Message.initializeFixedArray(obj.PotentialValue, 181);
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.AngleMin = obj.AngleMin;
            cpObj.AngleMax = obj.AngleMax;
            cpObj.AngleIncrement = obj.AngleIncrement;
            cpObj.MaxPotnEngy = obj.MaxPotnEngy;
            cpObj.MaxIndex = obj.MaxIndex;
            cpObj.PosOrderMax = obj.PosOrderMax;
            cpObj.PosOrderIndex = obj.PosOrderIndex;
            cpObj.NegOrderMax = obj.NegOrderMax;
            cpObj.NegOrderIndex = obj.NegOrderIndex;
            cpObj.PotentialValue = obj.PotentialValue;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.AngleMin = strObj.AngleMin;
            obj.AngleMax = strObj.AngleMax;
            obj.AngleIncrement = strObj.AngleIncrement;
            obj.MaxPotnEngy = strObj.MaxPotnEngy;
            obj.MaxIndex = strObj.MaxIndex;
            obj.PosOrderMax = strObj.PosOrderMax;
            obj.PosOrderIndex = strObj.PosOrderIndex;
            obj.NegOrderMax = strObj.NegOrderMax;
            obj.NegOrderIndex = strObj.NegOrderIndex;
            obj.PotentialValue = strObj.PotentialValue;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.AngleMin = obj.AngleMin;
            strObj.AngleMax = obj.AngleMax;
            strObj.AngleIncrement = obj.AngleIncrement;
            strObj.MaxPotnEngy = obj.MaxPotnEngy;
            strObj.MaxIndex = obj.MaxIndex;
            strObj.PosOrderMax = obj.PosOrderMax;
            strObj.PosOrderIndex = obj.PosOrderIndex;
            strObj.NegOrderMax = obj.NegOrderMax;
            strObj.NegOrderIndex = obj.NegOrderIndex;
            strObj.PotentialValue = obj.PotentialValue;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.colibri_msgs.AngPotnEngy.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.colibri_msgs.AngPotnEngy;
            obj.reload(strObj);
        end
    end
end

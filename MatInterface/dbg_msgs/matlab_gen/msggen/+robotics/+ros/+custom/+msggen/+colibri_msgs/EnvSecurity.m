classdef EnvSecurity < robotics.ros.Message
    %EnvSecurity MATLAB implementation of colibri_msgs/EnvSecurity
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'colibri_msgs/EnvSecurity' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '9529c5a877760e049bcae6e1faea3d5c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsBoolClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Bool') % Dispatch to MATLAB class for message type std_msgs/Bool
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Collision
        CollisionProb
        LaserMinDis
        LaserMinIndex
        LaserProb
        UltraMinDis
        UltraMinIndex
        UltraProb
        BumperMinDis
        BumperMinIndex
        BumperProb
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Collision', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BumperMinDis', 'BumperMinIndex', 'BumperProb', 'Collision', 'CollisionProb', 'Header', 'LaserMinDis', 'LaserMinIndex', 'LaserProb', 'UltraMinDis', 'UltraMinIndex', 'UltraProb'} % List of non-constant message properties
        ROSPropertyList = {'bumper_min_dis', 'bumper_min_index', 'bumper_prob', 'collision', 'collision_prob', 'header', 'laser_min_dis', 'laser_min_index', 'laser_prob', 'ultra_min_dis', 'ultra_min_index', 'ultra_prob'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = EnvSecurity(msg)
            %EnvSecurity Construct the message object EnvSecurity
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'EnvSecurity', 'header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function collision = get.Collision(obj)
            %get.Collision Get the value for property Collision
            if isempty(obj.Cache.Collision)
                obj.Cache.Collision = feval(obj.StdMsgsBoolClass, obj.JavaMessage.getCollision);
            end
            collision = obj.Cache.Collision;
        end
        
        function set.Collision(obj, collision)
            %set.Collision Set the value for property Collision
            validateattributes(collision, {obj.StdMsgsBoolClass}, {'nonempty', 'scalar'}, 'EnvSecurity', 'collision');
            
            obj.JavaMessage.setCollision(collision.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Collision)
                obj.Cache.Collision.setJavaObject(collision.getJavaObject);
            end
        end
        
        function collisionprob = get.CollisionProb(obj)
            %get.CollisionProb Get the value for property CollisionProb
            collisionprob = single(obj.JavaMessage.getCollisionProb);
        end
        
        function set.CollisionProb(obj, collisionprob)
            %set.CollisionProb Set the value for property CollisionProb
            validateattributes(collisionprob, {'numeric'}, {'nonempty', 'scalar'}, 'EnvSecurity', 'collisionprob');
            
            obj.JavaMessage.setCollisionProb(collisionprob);
        end
        
        function lasermindis = get.LaserMinDis(obj)
            %get.LaserMinDis Get the value for property LaserMinDis
            lasermindis = single(obj.JavaMessage.getLaserMinDis);
        end
        
        function set.LaserMinDis(obj, lasermindis)
            %set.LaserMinDis Set the value for property LaserMinDis
            validateattributes(lasermindis, {'numeric'}, {'nonempty', 'scalar'}, 'EnvSecurity', 'lasermindis');
            
            obj.JavaMessage.setLaserMinDis(lasermindis);
        end
        
        function laserminindex = get.LaserMinIndex(obj)
            %get.LaserMinIndex Get the value for property LaserMinIndex
            laserminindex = typecast(int16(obj.JavaMessage.getLaserMinIndex), 'uint16');
        end
        
        function set.LaserMinIndex(obj, laserminindex)
            %set.LaserMinIndex Set the value for property LaserMinIndex
            validateattributes(laserminindex, {'numeric'}, {'nonempty', 'scalar'}, 'EnvSecurity', 'laserminindex');
            
            obj.JavaMessage.setLaserMinIndex(laserminindex);
        end
        
        function laserprob = get.LaserProb(obj)
            %get.LaserProb Get the value for property LaserProb
            laserprob = single(obj.JavaMessage.getLaserProb);
        end
        
        function set.LaserProb(obj, laserprob)
            %set.LaserProb Set the value for property LaserProb
            validateattributes(laserprob, {'numeric'}, {'nonempty', 'scalar'}, 'EnvSecurity', 'laserprob');
            
            obj.JavaMessage.setLaserProb(laserprob);
        end
        
        function ultramindis = get.UltraMinDis(obj)
            %get.UltraMinDis Get the value for property UltraMinDis
            ultramindis = single(obj.JavaMessage.getUltraMinDis);
        end
        
        function set.UltraMinDis(obj, ultramindis)
            %set.UltraMinDis Set the value for property UltraMinDis
            validateattributes(ultramindis, {'numeric'}, {'nonempty', 'scalar'}, 'EnvSecurity', 'ultramindis');
            
            obj.JavaMessage.setUltraMinDis(ultramindis);
        end
        
        function ultraminindex = get.UltraMinIndex(obj)
            %get.UltraMinIndex Get the value for property UltraMinIndex
            ultraminindex = typecast(int16(obj.JavaMessage.getUltraMinIndex), 'uint16');
        end
        
        function set.UltraMinIndex(obj, ultraminindex)
            %set.UltraMinIndex Set the value for property UltraMinIndex
            validateattributes(ultraminindex, {'numeric'}, {'nonempty', 'scalar'}, 'EnvSecurity', 'ultraminindex');
            
            obj.JavaMessage.setUltraMinIndex(ultraminindex);
        end
        
        function ultraprob = get.UltraProb(obj)
            %get.UltraProb Get the value for property UltraProb
            ultraprob = single(obj.JavaMessage.getUltraProb);
        end
        
        function set.UltraProb(obj, ultraprob)
            %set.UltraProb Set the value for property UltraProb
            validateattributes(ultraprob, {'numeric'}, {'nonempty', 'scalar'}, 'EnvSecurity', 'ultraprob');
            
            obj.JavaMessage.setUltraProb(ultraprob);
        end
        
        function bumpermindis = get.BumperMinDis(obj)
            %get.BumperMinDis Get the value for property BumperMinDis
            bumpermindis = single(obj.JavaMessage.getBumperMinDis);
        end
        
        function set.BumperMinDis(obj, bumpermindis)
            %set.BumperMinDis Set the value for property BumperMinDis
            validateattributes(bumpermindis, {'numeric'}, {'nonempty', 'scalar'}, 'EnvSecurity', 'bumpermindis');
            
            obj.JavaMessage.setBumperMinDis(bumpermindis);
        end
        
        function bumperminindex = get.BumperMinIndex(obj)
            %get.BumperMinIndex Get the value for property BumperMinIndex
            bumperminindex = typecast(int16(obj.JavaMessage.getBumperMinIndex), 'uint16');
        end
        
        function set.BumperMinIndex(obj, bumperminindex)
            %set.BumperMinIndex Set the value for property BumperMinIndex
            validateattributes(bumperminindex, {'numeric'}, {'nonempty', 'scalar'}, 'EnvSecurity', 'bumperminindex');
            
            obj.JavaMessage.setBumperMinIndex(bumperminindex);
        end
        
        function bumperprob = get.BumperProb(obj)
            %get.BumperProb Get the value for property BumperProb
            bumperprob = single(obj.JavaMessage.getBumperProb);
        end
        
        function set.BumperProb(obj, bumperprob)
            %set.BumperProb Set the value for property BumperProb
            validateattributes(bumperprob, {'numeric'}, {'nonempty', 'scalar'}, 'EnvSecurity', 'bumperprob');
            
            obj.JavaMessage.setBumperProb(bumperprob);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Collision = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.CollisionProb = obj.CollisionProb;
            cpObj.LaserMinDis = obj.LaserMinDis;
            cpObj.LaserMinIndex = obj.LaserMinIndex;
            cpObj.LaserProb = obj.LaserProb;
            cpObj.UltraMinDis = obj.UltraMinDis;
            cpObj.UltraMinIndex = obj.UltraMinIndex;
            cpObj.UltraProb = obj.UltraProb;
            cpObj.BumperMinDis = obj.BumperMinDis;
            cpObj.BumperMinIndex = obj.BumperMinIndex;
            cpObj.BumperProb = obj.BumperProb;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Collision = copy(obj.Collision);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.CollisionProb = strObj.CollisionProb;
            obj.LaserMinDis = strObj.LaserMinDis;
            obj.LaserMinIndex = strObj.LaserMinIndex;
            obj.LaserProb = strObj.LaserProb;
            obj.UltraMinDis = strObj.UltraMinDis;
            obj.UltraMinIndex = strObj.UltraMinIndex;
            obj.UltraProb = strObj.UltraProb;
            obj.BumperMinDis = strObj.BumperMinDis;
            obj.BumperMinIndex = strObj.BumperMinIndex;
            obj.BumperProb = strObj.BumperProb;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Collision = feval([obj.StdMsgsBoolClass '.loadobj'], strObj.Collision);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.CollisionProb = obj.CollisionProb;
            strObj.LaserMinDis = obj.LaserMinDis;
            strObj.LaserMinIndex = obj.LaserMinIndex;
            strObj.LaserProb = obj.LaserProb;
            strObj.UltraMinDis = obj.UltraMinDis;
            strObj.UltraMinIndex = obj.UltraMinIndex;
            strObj.UltraProb = obj.UltraProb;
            strObj.BumperMinDis = obj.BumperMinDis;
            strObj.BumperMinIndex = obj.BumperMinIndex;
            strObj.BumperProb = obj.BumperProb;
            strObj.Header = saveobj(obj.Header);
            strObj.Collision = saveobj(obj.Collision);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.colibri_msgs.EnvSecurity.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.colibri_msgs.EnvSecurity;
            obj.reload(strObj);
        end
    end
end

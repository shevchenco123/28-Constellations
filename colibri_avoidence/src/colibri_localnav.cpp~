#include "colibri_ca.h"

scan_ca::scan_ca()
{
	goal_dir = 140;	//goal direction
	memset(scan_ca::handled_scan4ca,0.2,N_SAMPLE);
	ptrScan4ca = handled_scan4ca;
	
	memset(delta_phi_vector,0,N_SAMPLE);
	memset(kp_phi_vector,0,N_SAMPLE);

	memset(phi_range_start_vector, 1, N_SAMPLE);
	memset(phi_range_end_vector, 181, N_SAMPLE);

	memset(krf_vector,0.1,N_SAMPLE);
	memset(kaf_vector, 0, N_SAMPLE);

	memset(passfcn_vector, 0, N_SAMPLE);
	max_passfcn_value = 0.0;

	forward_maxpass_num = 0;
	backward_maxpass_num = 0;


	v = 0.0;
	vth = 0.0;
	
	angle_adj = 0.0;
	vel_adj = 0.0;
	colision_potential = 0;

	wander_flag = 0;
	
	scan_sub4ca = nh_ca.subscribe<sensor_msgs::LaserScan>("/scan", 1, &scan_ca::ScanCallBack, this);
	
}

scan_ca::~scan_ca()
{
	
}

void scan_ca::ScanCallBack(const sensor_msgs::LaserScan::ConstPtr& scan_ca)
{
	int j = 61;
	for(int i = 0; i < N_SAMPLE; i++)
	{
		handled_scan4ca[i] = scan_ca->ranges[j];
		if(handled_scan4ca[i] < 0.1)
		{
			handled_scan4ca[i] = (scan_ca->ranges[j-2]+scan_ca->ranges[j+2]+scan_ca->ranges[j-5]+scan_ca->ranges[j+5]) / 4 + LASER_EDGE_MIN;
		}
		//cout<<"handled_scan4ca index  "<<i<<" data : "<<handled_scan4ca[i]<<endl;
		j = j + 2; 
	
	}
	
}
void scan_ca::CalcKrfTheta(float* ptrKp_phi_vector, int* ptrPhi_range_start, int* ptrPhi_range_end)
{

	for(int theta_index = 0; theta_index < N_SAMPLE; theta_index++)
	{
		for(int phi_index = 0; phi_index < N_SAMPLE; phi_index++)
		{
			if((theta_index >= *(ptrPhi_range_start+phi_index)) && (theta_index <= *(ptrPhi_range_end+phi_index)))
			{
				if(krf_vector[theta_index] <= *(ptrKp_phi_vector + phi_index))
				{	
					krf_vector[theta_index] =  *(ptrKp_phi_vector + phi_index);				
				}

			}

			
		}
	}
	
}
void scan_ca::CalcPhiScope(int i, int scope, int* ptrPhi_start, int* ptrPhi_end)
{
	int index_start = 0;
	int index_end = 0;

	index_start = i - scope;
	index_end = i + scope;

	if(index_start < 1)
	{
		*ptrPhi_start = 1;
		*ptrPhi_end = index_end;
	}else if(index_end > N_SAMPLE)
	{
		*ptrPhi_start = index_start;
		*ptrPhi_end = N_SAMPLE;				
	}else
	{
		*ptrPhi_start = index_start;
		*ptrPhi_end = index_end;
	}

}

void scan_ca::CalcMaxPassValAndForwardBound(unsigned int flag, float* max_passfcn_val, float* ptrK_pg,int* bound_forward)
{
	float tmp_passfcn_value = 0.0;
	int tmp_bound_forward = 0;
		
		for(int j = 0; j < N_SAMPLE; j++)
		{
			if(flag == 1)
			{
				*(ptrK_pg + j) = 1 / (krf_vector[j]);
			}
			else
			{
				*(ptrK_pg + j) = kaf_vector[j] / (krf_vector[j]);
			}
		
			if(tmp_passfcn_value <= *(ptrK_pg + j))
			{
				tmp_bound_forward = j;
				tmp_passfcn_value = *(ptrK_pg + j);
			}	
		}
		
		*bound_forward= tmp_bound_forward;
		*max_passfcn_val = tmp_passfcn_value;

}
void scan_ca::CalcMaxPassValAndBackwardBound(unsigned int flag, float* max_passfcn_val, float* ptrK_pg,int* bound_backward)
{
	float tmp_passfcn_value = 0.0;
	int tmp_bound_backward = 0;

	for(int k = N_SAMPLE - 1; k >= 0; k--)
	{
		if(flag == 1)
		{
			*(ptrK_pg + k) = 1 / (krf_vector[k]);
		}
		else
		{
			*(ptrK_pg + k) = kaf_vector[k] / (krf_vector[k]);
		}		
		if(tmp_passfcn_value <= *(ptrK_pg + k))
		{
			tmp_bound_backward = k;
			tmp_passfcn_value = *(ptrK_pg + k);
		}	
	}
		
	*bound_backward= tmp_bound_backward;
	*max_passfcn_val = tmp_passfcn_value;

}

float scan_ca::CalcAdjDir(float* ptrPassfcn_vector, float max_passfcn_val, int* max_passfcn_bound_forward, int* max_passfcn_bound_backward)
{
	int mid_num = 90;

	float deadzone = 0.04;
	float adjDir = 0.0;
	
	for(int m = 0; m <= mid_num ; m++)  //backward directrion search using forward bound
	{
		if(abs(*(ptrPassfcn_vector + *(max_passfcn_bound_forward) - m) - max_passfcn_val) < deadzone)
		{
			forward_maxpass_num ++;
		}else
		{
			break;
		}
	}
	for(int n = 0; n <= mid_num ; n++)	// forward direction search using backward bound
	{
		if(abs(*(ptrPassfcn_vector + *(max_passfcn_bound_backward) + n)- max_passfcn_val) < deadzone)
		{
			backward_maxpass_num ++ ;
		}else
		{
			break;
		}
	}

	
	if (forward_maxpass_num <= backward_maxpass_num)
	{
		adjDir = *max_passfcn_bound_backward + backward_maxpass_num / 2.0;
	}else
	{
		adjDir = *max_passfcn_bound_forward - forward_maxpass_num / 2.0;
	}

	return adjDir;

}
		
float scan_ca::CalcDsrVc(float vel_center)
{
	float d_sr_v = 0.0;
	d_sr_v = -0.5 * K_SR * vel_center * vel_center / ACC_DEC;

	return d_sr_v;
}

float scan_ca::CalcKpPhi(float vel_center, float d_phi)
{
	float tmpDsr = 0.0;
	float kp_phi = 0.0;
	tmpDsr = CalcDsrVc(vel_center);

	if(d_phi <= tmpDsr)
	{
		kp_phi = 10000;
	}
	else if((d_phi <= D_M)&&(tmpDsr < d_phi))
	{
		kp_phi = 1 / (d_phi - tmpDsr);
	}
	else if(d_phi > D_M)
	{
		kp_phi = 1 / (D_M - tmpDsr);
	}
	else
	{
		cout<<"Calc Kp_phi exception in CalcKpPhi Function ! : " <<endl;
		cout<< "tmpDsr : "<< tmpDsr <<endl;
		cout<< "d_phi : "<< d_phi <<endl;
	}

	
	return kp_phi;
}




#include "colibri_ca.h"

scan_ca::scan_ca()
{
	goal_dir = 120;	//goal direction
	memset(scan_ca::handled_scan4ca,0.2,N_SAMPLE);
	ptrScan4ca = handled_scan4ca;

	memset(passfcn_vector, 0, N_SAMPLE);
	memset(krf_vector,0.1,N_SAMPLE);
	vc = 0.0;
	vth = 0.0;
	
	angle_adj = 0.0;
	vel_adj = 0.0;
	colision_potential = 0;

	delta_phi = NULL;
	kp_phi = NULL;
	phi_range_start = NULL;
	phi_range_end = NULL;
	k_af = NULL;
	k_rf = NULL;

	scan_sub4ca = nh_ca.subscribe<sensor_msgs::LaserScan>("/scan", 1, &scan_ca::ScanCallBack, this);
	
}

scan_ca::~scan_ca()
{
	
}

void scan_ca::ScanCallBack(const sensor_msgs::LaserScan::ConstPtr& scan_ca)
{
	int j = 61;
	for(int i = 0; i < N_SAMPLE; i++)
	{
		handled_scan4ca[i] = scan_ca->ranges[j];
		if(handled_scan4ca[i] < 0.1)
		{
			handled_scan4ca[i] = (scan_ca->ranges[j-2]+scan_ca->ranges[j+2]+scan_ca->ranges[j-5]+scan_ca->ranges[j+5]) / 4 + LASER_EDGE_MIN;
		}
		//cout<<"handled_scan4ca index  "<<i<<" data : "<<handled_scan4ca[i]<<endl;
		j = j + 2; 
	
	}
	
}
void scan_ca::CalcKrfTheta(float* ptrKp_phi_vector, int* ptrPhi_range_start, int* ptrPhi_range_end)
{

	for(int theta_index = 0; theta_index < N_SAMPLE; theta_index++)
	{
		for(int phi_index = 0; phi_index < N_SAMPLE; phi_index++)
		{
			if((theta_index >= *(ptrPhi_range_start+phi_index)) && (theta_index <= *(ptrPhi_range_end+phi_index)))
			{
				if(krf_vector[theta_index] <= *(ptrKp_phi_vector + phi_index))
				{	
					krf_vector[theta_index] =  *(ptrKp_phi_vector + phi_index);				
				}

			}

			
		}
	}
	
}

float scan_ca::CalcDsrVc(float vel_center)
{
	float d_sr_v = 0.0;
	d_sr_v = -0.5 * K_SR * vel_center * vel_center / ACC_DEC;

	return d_sr_v;
}

float scan_ca::CalcKpPhi(float vel_center, float d_phi)
{
	float tmpDsr = 0.0;
	float kp_phi = 0.0;
	tmpDsr = CalcDsrVc(vel_center);

	if(d_phi <= tmpDsr)
	{
		kp_phi = 10000;
	}
	else if((d_phi <= D_M)&&(tmpDsr < d_phi))
	{
		kp_phi = 1 / (d_phi - tmpDsr);
	}
	else if(d_phi > D_M)
	{
		kp_phi = 1 / (D_M - tmpDsr);
	}
	else
	{
		cout<<"Calc Kp_phi exception in CalcKpPhi Function ! : " <<endl;
		cout<< "tmpDsr : "<< tmpDsr <<endl;
		cout<< "d_phi : "<< d_phi <<endl;
	}

	
	return kp_phi;
}




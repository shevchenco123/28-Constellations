#include "colibri_local_nav.h"

local_nav::local_nav()
{	
		//memset(goal_state, 0, POS_DIM);

		goal_state[0] = 3.0;
		goal_state[1] = 3.0;
		goal_state[2] = 90.0;
			
		memset(robot_init_state, 0, POS_DIM);

		memset(current_robot_state, 0, POS_DIM);
		
		memset(last_robot_state, 0, POS_DIM);
		
		memset(current_robot_vel, 0, VEL_DIM);//store the linear vel and angular vel
		memset(last_robot_vel, 0, VEL_DIM);

		linear_filter_aplha = 0.5;		// filter factor
		angular_filter_aplha = 0.5;		

		sub_carto_odom = nh_nav.subscribe<nav_msgs::Odometry>("/odom", 1, &local_nav::CartoOdomCallBack, this);
		pub_apf_twist = nh_nav.advertise<geometry_msgs::Twist>("/cmd_vel",1);

}

local_nav::~local_nav()
{
	
}

void local_nav::CartoOdomCallBack(const nav_msgs::Odometry::ConstPtr& carto_odom)
{
	
	float tmp_yaw_rad = 0.0;
	current_robot_state[0] = carto_odom->pose.pose.position.x;
	current_robot_state[1] = carto_odom->pose.pose.position.y;
	
	current_carto_quat = carto_odom->pose.pose.orientation;
	tmp_yaw_rad = tf::getYaw(current_carto_quat);
	current_robot_state[2] = tmp_yaw_rad * RAD2DEGREE_FACTOR;

	current_robot_vel[0] = carto_odom->twist.twist.linear.x;
	current_robot_vel[1] = carto_odom->twist.twist.angular.z;

	
}

float local_nav::LinearVelFilter(float* ctrl_linear_vel, float* last_linear_vel)
{

}

float local_nav::AngularVelFilter(float* ctrl_anglar_vel, float* last_angular_vel)
{

}

void local_nav::CalcOffsetOfGoalAndRobot(float* ptrCurrent_robot_state, float* ptrGoal_state, float* ptrDelta_dis, float* ptrDelta_yaw)
{
	float tmp_delta_x = 0.01;
	float tmp_delta_y = 0.01;
	float delta_dis_square = 0.0;
	float yaw_offset = 0.0;

	tmp_delta_x =  *(ptrGoal_state) - *(ptrCurrent_robot_state);
	tmp_delta_y =  *(ptrGoal_state + 1) - *(ptrCurrent_robot_state + 1);

	delta_dis_square = tmp_delta_x * tmp_delta_x + tmp_delta_y * tmp_delta_y;
	*ptrDelta_dis = sqrt(delta_dis_square);

	*ptrDelta_yaw = atan2(tmp_delta_y, tmp_delta_x) * RAD2DEGREE_FACTOR;
	
}
bool local_nav::CalcGoalDirOfLaserView(float* dir_robot2goal, float* dir_laser, float* dir_laser2goal, float* self_rot_angle)
{
	
	*dir_laser2goal = (*dir_robot2goal) - (*dir_laser) + 90.0;
	if((*dir_laser2goal >= 180.0)||(*dir_laser2goal <= 0.0))
	{
		*self_rot_angle = *dir_laser2goal - 90.0;
		return false;
	}
	else
	{
		*self_rot_angle = 0.0;
		return true;
	}
	
}

bool local_nav::IsReachGoalPositionOK(float* ptrDelta_dis)
{
	if(*(ptrDelta_dis) < TRANSLATION_TOLERANCE)
	{
		return true;
	}
	else
	{
		return false;
	}
}
bool local_nav::IsReachGoalOrientationOK(float* ptrDelta_yaw)
{
	if(abs(*(ptrDelta_yaw)) < ROTATION_TOLERANCE)
	{
		return true;
	}
	else
	{
		return false;
	}

}


		






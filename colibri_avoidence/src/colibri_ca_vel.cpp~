#include "colibri_ca.h"

int main(int argc, char* argv[])
{	
	ros::init(argc, argv, "colibri_ca_node");
	scan_ca scan4caObj;

	ros::Rate loop_rate(10);

	ROS_INFO("Start to avoid colision for local scope ... ");

	float delta_phi_vector[N_SAMPLE];
	memset(delta_phi_vector,0,N_SAMPLE);
	float kp_phi_vector[N_SAMPLE];
	memset(kp_phi_vector,0,N_SAMPLE);

	int phi_range_start_vector[N_SAMPLE];
	memset(phi_range_start_vector, 1, N_SAMPLE);
	int phi_range_end_vector[N_SAMPLE];
	memset(phi_range_end_vector, 181, N_SAMPLE);

	float k_af_vector[N_SAMPLE];
	memset(k_af_vector, 0, N_SAMPLE);


	float v_0 = 0.0;
	int range_num = 0;
	int index_start = 0;
	int index_end = 0;

	int tmp_theta = 0;
	float tmp_passfcn_value = 0.0;
	int passfcn_max_index = 0;

    ofstream  file1,file2,file3; 
    file1.open ("cppscan4ca_vector.txt"); 
	file2.open ("cppkrf_vector.txt"); 
	file3.open ("cpppassfcn_vector.txt"); 
	int delay_cnt = 0;


	while (ros::ok())
	{	
			
		if(delay_cnt < DELAY_THRESHOLD)
		{
			delay_cnt ++;
			ros::spinOnce();
			loop_rate.sleep();
		}
		
		if(delay_cnt >= DELAY_THRESHOLD)
		{
			ROS_INFO("start ...");
			for(int i = 1; i <= N_SAMPLE; i++)
			{
				delta_phi_vector[i-1] = asin(D_SF / (*(scan4caObj.ptrScan4ca + i - 1))) * RAD2DEGREE_FACTOR;
				kp_phi_vector[i-1] = scan4caObj.CalcKpPhi(v_0, *(scan4caObj.ptrScan4ca + i - 1));
				range_num = floor(delta_phi_vector[i-1] / ANGLE_RESOL_CA);
				
				file1 << fixed << setprecision(4) << *(scan4caObj.ptrScan4ca + i - 1);
				file1 << '\t';	


				index_start = i - range_num;
				index_end = i + range_num;
		
				if(index_start < 1)
				{
					phi_range_start_vector[i-1] = 1;
					phi_range_end_vector[i-1] = index_end;
				}else if(index_end > N_SAMPLE)
				{
					phi_range_start_vector[i-1] = index_start;
					phi_range_end_vector[i-1] = N_SAMPLE;				
				}else
				{
					phi_range_start_vector[i-1] = index_start;
					phi_range_end_vector[i-1] = index_end;
				}
			
				tmp_theta = i - 1; // unit in degree
				k_af_vector[i-1] = cos((tmp_theta - scan4caObj.goal_dir) * DEGREE2RAD_FACTOR);
				scan4caObj.krf_vector[i-1] = kp_phi_vector[i-1];


			}


			file1.close();
		
			scan4caObj.CalcKrfTheta(kp_phi_vector, phi_range_start_vector, phi_range_end_vector);

			for(int j = 1; j <= N_SAMPLE; j++)
			{
				//scan4caObj.passfcn_vector[j-1] = *(k_af_vector+j-1) / (scan4caObj.krf_vector[j-1]);
				scan4caObj.passfcn_vector[j-1] = 1 / (scan4caObj.krf_vector[j-1]);
				file2<< fixed << setprecision(4) << scan4caObj.krf_vector[j-1];
				file2 << '\t';
				file3<< fixed << setprecision(4) << scan4caObj.passfcn_vector[j-1];
				file3 << '\t';

				if(tmp_passfcn_value <= scan4caObj.passfcn_vector[j-1])
				{
					passfcn_max_index = j;
					tmp_passfcn_value = scan4caObj.passfcn_vector[j-1];	
				}	
			}
			file2.close();
			file3.close();

			if(tmp_passfcn_value < MAX_PASSFCN_THRESHOLD)
			{
				scan4caObj.colision_potential = 1;
			}
			else
			{

			}
	
			cout<<"passfcn_max_index: "<< passfcn_max_index <<endl;	
			cout<<"passfcn_max_value: "<< tmp_passfcn_value <<endl;
			cout<<"colission_potential: "<< scan4caObj.colision_potential <<endl;					
			ros::spinOnce();
			loop_rate.sleep();
			ROS_INFO("end ...");
		}
	}


	return 0;	
}




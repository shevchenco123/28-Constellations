#include <iostream>
#include <math.h>
#include <string>
#include <vector>
#include <fstream>
#include <iomanip>
#include <ctime>

#include <ros/ros.h>
#include <nav_msgs/Odometry.h>
#include <tf/transform_broadcaster.h>
#include <sensor_msgs/LaserScan.h>

#ifndef _COLIBRI_CA_H_
#define _COLIBRI_CA_H_

using namespace std;

#define N_SAMPLE 181	//every degree for front semi-cirle
#define ANGLE4CA_START 0
#define ANGLE4CA_START_INDEX 61		// 61=(0-(-30))/0.5+1
#define ANGLE4CA_END 180
#define ANGLE4CA_END_INDEX 421		// 421=(180-(-30))/0.5+1
#define LASER_EDGE_MIN 0.06

#define K_SF 1.2	//adj factor for latitude dir in polar frame
#define WIDTH 0.56
#define D_SF	0.336	//0.5*K_SF*WIDTH 

#define K_SR 1.1	//adj factor for longitude dir in polar frame
#define ACC_DEC -2		//accerlaration for decrease vel
#define D_M 6	// local ca distance

#define V_MAX 1.2
#define V_MIN 0.02

#define RAD2DEGREE_FACTOR 57.2958
#define DEGREE2RAD_FACTOR 0.01745
#define ANGLE_RESOL_CA	1

#define MAX_PASSFCN_THRESHOLD 1
#define DELAY_THRESHOLD 10


class scan_ca
{
	public:
		
		float *ptrScan4ca;
		float handled_scan4ca[N_SAMPLE];
		float passfcn_vector[N_SAMPLE];

		float krf_vector[N_SAMPLE];

		float goal_dir;	//goal direction in degree
		float vc;
		float vth;
		
		float angle_adj;
		float vel_adj;
		unsigned int colision_potential;

		scan_ca();
		~scan_ca();
		float CalcKpPhi(float vel_center, float d_phi);
		void CalcKrfTheta(float* ptrKp_phi_vector, int* ptrPhi_range_start, int* ptrPhi_range_end);	
	private:

		float *delta_phi;
		float *kp_phi;
		int *phi_range_start;
		int *phi_range_end;
		float *k_af;
		float *k_rf;
		
		ros::NodeHandle nh_ca;
		ros::Subscriber scan_sub4ca;
		void ScanCallBack(const sensor_msgs::LaserScan::ConstPtr& scan_ca);

		float CalcDsrVc(float vel_center);


};


#endif

